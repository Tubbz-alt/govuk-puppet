#!/usr/bin/env bash

exec 2>&1 >> /var/log/automongodbbackup/backup.log

set -e
set -o pipefail

# The default Icinga passive alert assumes that the script failed
NAGIOS_CODE=2
NAGIOS_MESSAGE="CRITICAL: MongoDB backup failed"

# Triggered whenever this script exits, successful or otherwise. The values
# of CODE/MESSAGE will be taken from that point in time.
function nagios_passive () {
  printf "<%= @ipaddress_eth0 %>\t<%= @service_desc %>\t${NAGIOS_CODE}\t${NAGIOS_MESSAGE}\n" | /usr/sbin/send_nsca -H <%= @alert_hostname %> >/dev/null
}

trap nagios_passive EXIT

#
# MongoDB Backup Script
# VER. 0.9
# More Info: http://github.com/micahwedemeyer/automongobackup

# Note, this is a lobotomized port of AutoMySQLBackup
# (http://sourceforge.net/projects/automysqlbackup/) for use with
# MongoDB.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#=====================================================================
#=====================================================================
# Set the following variables to your system needs
# (Detailed instructions below variables)
#=====================================================================

# External config - override default values set below
# EXTERNAL_CONFIG="/etc/default/automongobackup"	# debian style
EXTERNAL_CONFIG="/etc/mongodb/backup.conf"	# centos style

# Username to access the mongo server e.g. dbuser
# Unnecessary if authentication is off
# DBUSERNAME=""

# Username to access the mongo server e.g. password
# Unnecessary if authentication is off
# DBPASSWORD=""

# Host name (or IP address) of mongo server e.g localhost
DBHOST="127.0.0.1"

# Port that mongo is listening on
DBPORT="27017"

# Backup directory location e.g /backups
BACKUPDIR="/var/lib/automongodbbackup"

# ============================================================
# === ADVANCED OPTIONS ( Read the doc's below for details )===
#=============================================================

# Which day do you want weekly backups? (1 to 7 where 1 is Monday)
DOWEEKLY=6

# Which day of the Month fo you want monthly backups. 00 to disable, 01, 02 etc
# to pick the day.
<% if @domonthly == false -%>
DOMONTHLY=00
<% else -%>
DOMONTHLY=01
<% end -%>

# Choose Compression type. (gzip or bzip2)
COMP="gzip"

# Choose if the uncompressed folder should be deleted after compression has completed
CLEANUP="yes"

# Additionally keep a copy of the most recent backup in a seperate directory.
LATEST="yes"

# Make Hardlink not a copy
LATESTLINK="yes"

# Use oplog for point-in-time snapshotting.
OPLOG="yes"

# Enable and use journaling.
JOURNAL="yes"

# Choose other Server if is Replica-Set Master
REPLICAONSLAVE="yes"

# Command to run before backups
if [ -n "${BACKUPDIR}" ]; then
    PREBACKUP="find ${BACKUPDIR}/ -type f -mtime +90 -exec rm {} \+"
fi

# Command run after backups (uncomment to use)
# POSTBACKUP=""

#=====================================================================
# Options documentation
#=====================================================================
# Set DBUSERNAME and DBPASSWORD of a user that has at least SELECT permission
# to ALL databases.
#
# Set the DBHOST option to the server you wish to backup, leave the
# default to backup "this server".(to backup multiple servers make
# copies of this file and set the options for that server)
#
# You can change the backup storage location from /backups to anything
# you like by using the BACKUPDIR setting..
#
# Finally copy automongobackup.sh to anywhere on your server and make sure
# to set executable permission. You can also copy the script to
# /etc/cron.daily to have it execute automatically every night or simply
# place a symlink in /etc/cron.daily to the file if you wish to keep it
# somwhere else.
#
# NOTE: On Debian copy the file with no extention for it to be run
# by cron e.g just name the file "automongobackup"
#
# Thats it..
#
#
# === Advanced options ===
#
# To set the day of the week that you would like the weekly backup to happen
# set the DOWEEKLY setting, this can be a value from 1 to 7 where 1 is Monday,
# The default is 6 which means that weekly backups are done on a Saturday.
#
# Use PREBACKUP and POSTBACKUP to specify Pre and Post backup commands
# or scripts to perform tasks either before or after the backup process.
#
#
#=====================================================================
# Backup Rotation..
#=====================================================================
#
# Daily Backups are rotated weekly.
#
# Weekly Backups are run by default on Saturday Morning when
# cron.daily scripts are run. This can be changed with DOWEEKLY setting.
#
# Weekly Backups are rotated on a 5 week cycle.
# Monthly Backups are run on the 1st of the month.
# Monthly Backups are NOT rotated automatically.
#
# It may be a good idea to copy Monthly backups offline or to another
# server.
#
#=====================================================================
# Please Note!!
#=====================================================================
#
# I take no resposibility for any data loss or corruption when using
# this script.
#
# This script will not help in the event of a hard drive crash. You
# should copy your backups offline or to another PC for best protection.
#
# Happy backing up!
#
#=====================================================================
# Restoring
#=====================================================================
# ???
#
#=====================================================================
# Change Log
#=====================================================================
# VER 0.9 - (2011-10-28) (author: Joshua Keroes)
#       - Fixed bugs and improved logic in select_secondary_member()
#       - Fixed minor grammar issues and formatting in docs
#
# VER 0.8 - (2011-10-02) (author: Krzysztof Wilczynski)
#       - Added better support for selecting Secondary member in the
#         Replica Sets that can be used to take backups without bothering
#         busy Primary member too much.
#
# VER 0.7 - (2011-09-23) (author: Krzysztof Wilczynski)
#       - Added support for --journal dring taking backup
#         to enable journaling.
#
# VER 0.6 - (2011-09-15) (author: Krzysztof Wilczynski)
#       - Added support for --oplog during taking backup for
#         point-in-time snapshotting.
#       - Added filter for "mongodump" writing "connected to:"
#         on the standard error, which is not desirable.
#
# VER 0.5 - (2011-02-04) (author: Jan Doberstein)
#       - Added replicaset support (don't Backup on Master)
#       - Added Hard Support for 'latest' Copy
#
# VER 0.4 - (2010-10-26)
#       - Cleaned up warning message to make it clear that it can
#         usually be safely ignored
#
# VER 0.3 - (2010-06-11)
#       - Added the DBPORT parameter
#       - Changed USERNAME and PASSWORD to DBUSERNAME and DBPASSWORD
#       - Fixed some bugs with compression
#
# VER 0.2 - (2010-05-27) (author: Gregory Barchard)
#       - Added back the compression option for automatically creating
#         tgz or bz2 archives
#       - Added a cleanup option to optionally remove the database dump
#         after creating the archives
#       - Removed unnecessary path additions
#
# VER 0.1 - (2010-05-11)
#       - Initial Release
#
#=====================================================================
#=====================================================================
#=====================================================================
#
# Should not need to be modified from here down!!
#
#=====================================================================
#=====================================================================
#=====================================================================

# Include external config
[ ! -z "$EXTERNAL_CONFIG" ] && [ -f "$EXTERNAL_CONFIG" ] && source "${EXTERNAL_CONFIG}"
# Include extra config file if specified on commandline, e.g. for backuping several remote dbs from central server
[ ! -z "$1" ] && [ -f "$1" ] && source ${1}

#=====================================================================
STARTEPOCH=$(date +'%s')
APPNAME=$(basename $0)
PATH=/usr/local/bin:/usr/bin:/bin
DATE=`date +%Y-%m-%d_%Hh%Mm`		# Datestamp e.g 2002-09-21
DOW=`date +%A`						# Day of the week e.g. Monday
DNOW=`date +%u`						# Day number of the week 1 to 7 where 1 represents Monday
DOM=`date +%d`						# Date of the Month e.g. 27
M=`date +%B`						# Month e.g January
W=`date +%V`						# Week Number e.g 37
VER=0.9							    # Version Number
BACKUPFILES=""
OPT=""							# OPT string for use with mongodump

# Do we need to use a username/password?
if [ "$DBUSERNAME" ]
then
  OPT="$OPT --username=$DBUSERNAME --password=$DBPASSWORD"
fi

# Do we use oplog for point-in-time snapshotting?
if [ "$OPLOG" = "yes" ]
then
  OPT="$OPT --oplog"
fi

# Do we enable and use journaling?
if [ "$JOURNAL" = "yes" ]
then
  OPT="$OPT --journal"
fi

# Create required directories
if [ ! -e "$BACKUPDIR" ]		# Check Backup Directory exists.
then
  mkdir -p "$BACKUPDIR"
fi

if [ ! -e "$BACKUPDIR/daily" ]		# Check Daily Directory exists.
then
  mkdir -p "$BACKUPDIR/daily"
fi

if [ ! -e "$BACKUPDIR/weekly" ]		# Check Weekly Directory exists.
then
  mkdir -p "$BACKUPDIR/weekly"
fi

if [ ! -e "$BACKUPDIR/monthly" ]	# Check Monthly Directory exists.
then
  mkdir -p "$BACKUPDIR/monthly"
fi

if [ ! -e "$BACKUPDIR/logs" ]		# Check Log Directory exists.
then
  mkdir -p "$BACKUPDIR/logs"
fi

if [ "$LATEST" = "yes" ]
then
  if [ ! -e "$BACKUPDIR/latest" ]	# Check Latest Directory exists.
  then
    mkdir -p "$BACKUPDIR/latest"
  fi

  eval rm -f "$BACKUPDIR/latest/*"
fi

# Functions

# Database dump function
dbdump () {
  mongodump --host=$DBHOST:$DBPORT --out=$1 $OPT
  RET=$?
  [ ${RET} -eq 0 ] && [ -e "$1" ] && return 0
  echo "ERROR: mongodump failed to create dumpfile: $1" >&2
  exit 1
}

#
# Select first available Secondary member in the Replica Sets and show its
# host name and port.
#
function select_secondary_member {
# We will use indirect-reference hack to return variable from this function.
local __return=$1

# Return list of with all replica set members
members=( $(mongo --quiet --eval \
  'rs.conf().members.forEach(function(x){ print(x.host) })') )

# Check each replset member to see if it's a secondary and return it.
if [ ${#members[@]} -gt 1 ] ; then
  for member in "${members[@]}" ; do

    is_secondary=$(mongo --quiet --host $member --eval 'rs.isMaster().secondary')
    case "$is_secondary" in
      'true')
        # First secondary wins ...
        secondary=$member
        break
        ;;
      'false')
        # Skip particular member if it is a Primary.
        continue
        ;;
      *)
        # Skip irrelevant entries.  Should not be any anyway ...
        continue
        ;;
    esac
  done
fi

if [ -n "$secondary" ] ; then
  # Ugly hack to return value from a Bash function ...
  eval $__return="'$secondary'"
fi
}

# Compression function plus latest copy
SUFFIX=""
compression () {
  if [ "$COMP" = "gzip" ]; then
    SUFFIX=".tgz"
    echo Tar and gzip to "$2$SUFFIX"
    cd $1 && tar -cvzf "$2$SUFFIX" "$2"
  elif [ "$COMP" = "bzip2" ]; then
    SUFFIX=".tar.bz2"
    echo Tar and bzip2 to "$2$SUFFIX"
    cd $1 && tar -cvjf "$2$SUFFIX" "$2"
  else
    echo "No compression option set, check advanced settings"
  fi
  if [ "$LATEST" = "yes" ]; then
    if [ "$LATESTLINK" = "yes" ];then
      COPY="cp -l"
    else
      COPY="cp"
    fi
    $COPY $1$2$SUFFIX "$BACKUPDIR/latest/"
  fi
  if [ "$CLEANUP" = "yes" ]; then
    echo Cleaning up folder at "$1$2"
    rm -rf "$1$2"
  fi
  return 0
}

# Run command before we begin
if [ "$PREBACKUP" ]
then
  echo ======================================================================
  echo "Prebackup command output."
  echo
  eval $PREBACKUP
  echo
  echo ======================================================================
  echo
fi

# Hostname for LOG information
if [ "$DBHOST" = "localhost" ]; then
  HOST=`hostname`
  if [ "$SOCKET" ]; then
    OPT="$OPT --socket=$SOCKET"
  fi
else
  HOST=$DBHOST
fi

# Try to select an available secondary for the backup or fallback to DBHOST.
if [ "x${REPLICAONSLAVE}" == "xyes" ] ; then
  # Return value via indirect-reference hack ...
  select_secondary_member secondary

  if [ -n "$secondary" ] ; then
    DBHOST=${secondary%%:*}
    DBPORT=${secondary##*:}
  else
    SECONDARY_WARNING="WARNING: No suitable Secondary found in the Replica Sets.  Falling back to ${DBHOST}."
  fi
fi

echo ======================================================================
echo AutoMongoBackup VER $VER

[ ! -z "$SECONDARY_WARNING" ] &&
  {
    echo
    echo "$SECONDARY_WARNING"
  }

echo
echo Backup of Database Server - $HOST on $DBHOST
echo ======================================================================

echo Backup Start `date`
echo ======================================================================
# Monthly Full Backup of all Databases
if [ $DOM = "$DOMONTHLY" ]; then
  echo Monthly Full Backup
  dbdump "$BACKUPDIR/monthly/$DATE.$M" &&
    compression "$BACKUPDIR/monthly/" "$DATE.$M"
  echo ----------------------------------------------------------------------

  # Weekly Backup
elif [ $DNOW = $DOWEEKLY ]; then
  echo Weekly Backup
  echo
  echo Rotating 5 weeks Backups...
  if [ "$W" -le 05 ];then
    REMW=`expr 48 + $W`
  elif [ "$W" -lt 15 ];then
    REMW=0`expr $W - 5`
  else
    REMW=`expr $W - 5`
  fi
  eval rm -f "$BACKUPDIR/weekly/week.$REMW.*"
  echo
  dbdump "$BACKUPDIR/weekly/week.$W.$DATE" &&
    compression "$BACKUPDIR/weekly/" "week.$W.$DATE"
  echo ----------------------------------------------------------------------

  # Daily Backup
else
  echo Daily Backup of Databases
  echo Rotating last weeks Backup...
  echo
  eval rm -f "$BACKUPDIR/daily/*.$DOW.*"
  echo
  dbdump "$BACKUPDIR/daily/$DATE.$DOW" &&
    compression "$BACKUPDIR/daily/" "$DATE.$DOW"
  echo ----------------------------------------------------------------------
fi
echo Backup End Time `date`
echo ======================================================================

echo Total disk space used for backup storage..
echo Size - Location
echo `du -hs "$BACKUPDIR"`
echo
echo ======================================================================

# Run command when we're done
if [ "$POSTBACKUP" ]
	then
	echo ======================================================================
	echo "Postbackup command output."
	echo
	eval $POSTBACKUP
	echo
	echo ======================================================================
fi


FINISHEPOCH=$(date +'%s')
TOTALTIME=$(($FINISHEPOCH - $STARTEPOCH))

NAGIOS_CODE=0
NAGIOS_MESSAGE="OK: MongoDB backup succeeded"
echo "$APPNAME completed in T:$TOTALTIME seconds"
